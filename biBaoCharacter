<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->
var outter = [];

function closeTest(){

	var array = ['one','two','three','four'];
	for (var i = 0; i < array.length; i++){
		var x = {};
		x.no = i;
		x.text = array[i];
		x.invoke = function(){
			console.log(i);
		}
		outter.push(x);
	}
}

closeTest();

console.log(outter[0].invoke());

console.log(outter[1].invoke());

console.log(outter[2].invoke());

console.log(outter[3].invoke());

很多初学者可能会认为答案是这样的：
0
1
2
3

但，实际上是：
4
4
4
4



其实，在每次迭代的时候，这样的语句x.invoke = function(){ console.log(i)}并没有被执行

只是构建了一个函数体为console.log(i)的函数对象。

当 i = 4   时，迭代停止，外部函数返回，当再去调用outter[0].invoke()时，i的值依旧为4

因此outter数组中的每一个元素的invoke都返回i的值：4



如何解决这一问题呢？

我们可以声明一个匿名函数，并立即执行他

var outter = [];

function closeTest2(){

	var array = ['one','two','three','four'];
	for (var i = 0; i < array.length; i++){
		var x = {};
		x.no = i;
		x.text = array[i];
		x.invoke = function(no){
			return function(){
				console.log(no);
			}
		}(i);
		outter.push(x);
	}
}

closeTest2();

console.log(outter[0].invoke());

console.log(outter[1].invoke());

console.log(outter[2].invoke());

console.log(outter[3].invoke());

在这个例子中，我们为x.invoke赋值的时候

先运行一个可以返回一个函数的函数

然后立即执行之，这样，x.invoke的每一次迭代其实相当于执行了这样的语句：

//x == 0

x.invoke = function(){console.log(0);}

//x == 1

x.invoke = function(){console.log(1);}

//x == 2

x.invoke = function(){console.log(2);}

//x == 3

x.invoke = function(){console.log(3);}


这样就可以得到正确的结果了

【闭包允许你引用存在于外部函数中的变量】

但是

【闭包并不是使用该变量创建时的值，相反，他是使用该变量最后的值】
<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<p>var outter = [];</p>

<p>function closeTest(){</p>

<pre><code>var array = ['one','two','three','four'];
for (var i = 0; i &lt; array.length; i++){
    var x = {};
    x.no = i;
    x.text = array[i];
    x.invoke = function(){
        console.log(i);
    }
    outter.push(x);
}
</code></pre>

<p>}</p>

<p>closeTest();</p>

<p>console.log(outter[0].invoke());</p>

<p>console.log(outter[1].invoke());</p>

<p>console.log(outter[2].invoke());</p>

<p>console.log(outter[3].invoke());</p>

<p>很多初学者可能会认为答案是这样的：
0
1
2
3</p>

<p>但，实际上是：
4
4
4
4</p>

<p>其实，在每次迭代的时候，这样的语句x.invoke = function(){ console.log(i)}并没有被执行</p>

<p>只是构建了一个函数体为console.log(i)的函数对象。</p>

<p>当 i = 4   时，迭代停止，外部函数返回，当再去调用outter[0].invoke()时，i的值依旧为4</p>

<p>因此outter数组中的每一个元素的invoke都返回i的值：4</p>

<p>如何解决这一问题呢？</p>

<p>我们可以声明一个匿名函数，并立即执行他</p>

<p>var outter = [];</p>

<p>function closeTest2(){</p>

<pre><code>var array = ['one','two','three','four'];
for (var i = 0; i &lt; array.length; i++){
    var x = {};
    x.no = i;
    x.text = array[i];
    x.invoke = function(no){
        return function(){
            console.log(no);
        }
    }(i);
    outter.push(x);
}
</code></pre>

<p>}</p>

<p>closeTest2();</p>

<p>console.log(outter[0].invoke());</p>

<p>console.log(outter[1].invoke());</p>

<p>console.log(outter[2].invoke());</p>

<p>console.log(outter[3].invoke());</p>

<p>在这个例子中，我们为x.invoke赋值的时候</p>

<p>先运行一个可以返回一个函数的函数</p>

<p>然后立即执行之，这样，x.invoke的每一次迭代其实相当于执行了这样的语句：</p>

<p>//x == 0</p>

<p>x.invoke = function(){console.log(0);}</p>

<p>//x == 1</p>

<p>x.invoke = function(){console.log(1);}</p>

<p>//x == 2</p>

<p>x.invoke = function(){console.log(2);}</p>

<p>//x == 3</p>

<p>x.invoke = function(){console.log(3);}</p>

<p>这样就可以得到正确的结果了</p>

<p>【闭包允许你引用存在于外部函数中的变量】</p>

<p>但是</p>

<p>【闭包并不是使用该变量创建时的值，相反，他是使用该变量最后的值】</p>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2014 by isnowfy, Designed by isnowfy</p>
	</div>
</div>
<script src="main.js"></script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "biBaoCharacter";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
</body>
</html>
